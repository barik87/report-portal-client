/*
 * Report Portal
 * Report Portal API documentation
 *
 * OpenAPI spec version: 4.3.11
 * Contact: Support EPMC-TST Report Portal <SupportEPMC-TSTReportPortal@epam.com>
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.qatools.rp.dto.generated;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModelProperty;

import java.util.*;

/**
 * ContentParameters
 */

public class ContentParameters {
  @JsonProperty("content_fields")
  private List<String> contentFields = new ArrayList<>();

  /**
   * Gets or Sets gadget
   */
  public enum GadgetEnum {
    OLD_LINE_CHART("old_line_chart"),
    
    INVESTIGATED_TREND("investigated_trend"),
    
    LAUNCH_STATISTICS("launch_statistics"),
    
    STATISTIC_TREND("statistic_trend"),
    
    CASES_TREND("cases_trend"),
    
    NOT_PASSED("not_passed"),
    
    OVERALL_STATISTICS("overall_statistics"),
    
    UNIQUE_BUG_TABLE("unique_bug_table"),
    
    BUG_TREND("bug_trend"),
    
    ACTIVITY_STREAM("activity_stream"),
    
    LAUNCHES_COMPARISON_CHART("launches_comparison_chart"),
    
    LAUNCHES_DURATION_CHART("launches_duration_chart"),
    
    LAUNCHES_TABLE("launches_table"),
    
    MOST_FAILED_TEST_CASES("most_failed_test_cases");

    private String value;

    GadgetEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static GadgetEnum fromValue(String text) {
      for (GadgetEnum b : GadgetEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("gadget")
  private GadgetEnum gadget = null;

  @JsonProperty("itemsCount")
  private Integer itemsCount = null;

  @JsonProperty("metadata_fields")
  private List<String> metadataFields = null;

  /**
   * Gets or Sets type
   */
  public enum TypeEnum {
    LINE_CHART("line_chart"),
    
    COLUMN_CHART("column_chart"),
    
    BAR_CHART("bar_chart"),
    
    COMBINE_PIE_CHART("combine_pie_chart"),
    
    TRENDS_CHART("trends_chart"),
    
    NOT_PASSED_CHART("not_passed_chart"),
    
    CASES_TREND_CHART("cases_trend_chart"),
    
    TABLE("table"),
    
    ACTIVITY_PANEL("activity_panel"),
    
    STATISTICS_PANEL("statistics_panel"),
    
    UNIQUE_BUG_TABLE("unique_bug_table"),
    
    BUG_TREND("bug_trend"),
    
    LAUNCHES_COMPARISON_CHART("launches_comparison_chart"),
    
    LAUNCHES_DURATION_CHART("launches_duration_chart"),
    
    LAUNCHES_TABLE("launches_table");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("type")
  private TypeEnum type = null;

  @JsonProperty("widgetOptions")
  private Map<String, List<String>> widgetOptions = null;

  public ContentParameters contentFields(List<String> contentFields) {
    this.contentFields = contentFields;
    return this;
  }

  public ContentParameters addContentFieldsItem(String contentFieldsItem) {
    this.contentFields.add(contentFieldsItem);
    return this;
  }

   /**
   * Get contentFields
   * @return contentFields
  **/
  @ApiModelProperty(required = true, value = "")
  public List<String> getContentFields() {
    return contentFields;
  }

  public void setContentFields(List<String> contentFields) {
    this.contentFields = contentFields;
  }

  public ContentParameters gadget(GadgetEnum gadget) {
    this.gadget = gadget;
    return this;
  }

   /**
   * Get gadget
   * @return gadget
  **/
  @ApiModelProperty(required = true, value = "")
  public GadgetEnum getGadget() {
    return gadget;
  }

  public void setGadget(GadgetEnum gadget) {
    this.gadget = gadget;
  }

  public ContentParameters itemsCount(Integer itemsCount) {
    this.itemsCount = itemsCount;
    return this;
  }

   /**
   * Get itemsCount
   * @return itemsCount
  **/
  @ApiModelProperty(required = true, value = "")
  public Integer getItemsCount() {
    return itemsCount;
  }

  public void setItemsCount(Integer itemsCount) {
    this.itemsCount = itemsCount;
  }

  public ContentParameters metadataFields(List<String> metadataFields) {
    this.metadataFields = metadataFields;
    return this;
  }

  public ContentParameters addMetadataFieldsItem(String metadataFieldsItem) {
    if (this.metadataFields == null) {
      this.metadataFields = new ArrayList<>();
    }
    this.metadataFields.add(metadataFieldsItem);
    return this;
  }

   /**
   * Get metadataFields
   * @return metadataFields
  **/
  @ApiModelProperty(value = "")
  public List<String> getMetadataFields() {
    return metadataFields;
  }

  public void setMetadataFields(List<String> metadataFields) {
    this.metadataFields = metadataFields;
  }

  public ContentParameters type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @ApiModelProperty(required = true, value = "")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public ContentParameters widgetOptions(Map<String, List<String>> widgetOptions) {
    this.widgetOptions = widgetOptions;
    return this;
  }

  public ContentParameters putWidgetOptionsItem(String key, List<String> widgetOptionsItem) {
    if (this.widgetOptions == null) {
      this.widgetOptions = new HashMap<>();
    }
    this.widgetOptions.put(key, widgetOptionsItem);
    return this;
  }

   /**
   * Get widgetOptions
   * @return widgetOptions
  **/
  @ApiModelProperty(value = "")
  public Map<String, List<String>> getWidgetOptions() {
    return widgetOptions;
  }

  public void setWidgetOptions(Map<String, List<String>> widgetOptions) {
    this.widgetOptions = widgetOptions;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContentParameters contentParameters = (ContentParameters) o;
    return Objects.equals(this.contentFields, contentParameters.contentFields) &&
        Objects.equals(this.gadget, contentParameters.gadget) &&
        Objects.equals(this.itemsCount, contentParameters.itemsCount) &&
        Objects.equals(this.metadataFields, contentParameters.metadataFields) &&
        Objects.equals(this.type, contentParameters.type) &&
        Objects.equals(this.widgetOptions, contentParameters.widgetOptions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contentFields, gadget, itemsCount, metadataFields, type, widgetOptions);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContentParameters {\n");

    sb.append("    contentFields: ").append(toIndentedString(contentFields)).append("\n");
    sb.append("    gadget: ").append(toIndentedString(gadget)).append("\n");
    sb.append("    itemsCount: ").append(toIndentedString(itemsCount)).append("\n");
    sb.append("    metadataFields: ").append(toIndentedString(metadataFields)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    widgetOptions: ").append(toIndentedString(widgetOptions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

