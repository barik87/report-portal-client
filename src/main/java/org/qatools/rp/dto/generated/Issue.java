/*
 * Report Portal
 * Report Portal API documentation
 *
 * OpenAPI spec version: 4.3.11
 * Contact: Support EPMC-TST Report Portal <SupportEPMC-TSTReportPortal@epam.com>
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.qatools.rp.dto.generated;

import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.annotations.ApiModelProperty;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * Issue
 */

public class Issue {
  @JsonProperty("autoAnalyzed")
  private Boolean autoAnalyzed = null;

  @JsonProperty("comment")
  private String comment = null;

  @JsonProperty("externalSystemIssues")
  private List<ExternalSystemIssue> externalSystemIssues = null;

  @JsonProperty("ignoreAnalyzer")
  private Boolean ignoreAnalyzer = null;

  @JsonProperty("issue_type")
  private String issueType = null;

  public Issue autoAnalyzed(Boolean autoAnalyzed) {
    this.autoAnalyzed = autoAnalyzed;
    return this;
  }

   /**
   * Get autoAnalyzed
   * @return autoAnalyzed
  **/
  @ApiModelProperty(value = "")
  public Boolean isAutoAnalyzed() {
    return autoAnalyzed;
  }

  public void setAutoAnalyzed(Boolean autoAnalyzed) {
    this.autoAnalyzed = autoAnalyzed;
  }

  public Issue comment(String comment) {
    this.comment = comment;
    return this;
  }

   /**
   * Get comment
   * @return comment
  **/
  @ApiModelProperty(value = "")
  public String getComment() {
    return comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }

  public Issue externalSystemIssues(List<ExternalSystemIssue> externalSystemIssues) {
    this.externalSystemIssues = externalSystemIssues;
    return this;
  }

  public Issue addExternalSystemIssuesItem(ExternalSystemIssue externalSystemIssuesItem) {
    if (this.externalSystemIssues == null) {
      this.externalSystemIssues = new ArrayList<>();
    }
    this.externalSystemIssues.add(externalSystemIssuesItem);
    return this;
  }

   /**
   * Get externalSystemIssues
   * @return externalSystemIssues
  **/
  @ApiModelProperty(value = "")
  public List<ExternalSystemIssue> getExternalSystemIssues() {
    return externalSystemIssues;
  }

  public void setExternalSystemIssues(List<ExternalSystemIssue> externalSystemIssues) {
    this.externalSystemIssues = externalSystemIssues;
  }

  public Issue ignoreAnalyzer(Boolean ignoreAnalyzer) {
    this.ignoreAnalyzer = ignoreAnalyzer;
    return this;
  }

   /**
   * Get ignoreAnalyzer
   * @return ignoreAnalyzer
  **/
  @ApiModelProperty(value = "")
  public Boolean isIgnoreAnalyzer() {
    return ignoreAnalyzer;
  }

  public void setIgnoreAnalyzer(Boolean ignoreAnalyzer) {
    this.ignoreAnalyzer = ignoreAnalyzer;
  }

  public Issue issueType(String issueType) {
    this.issueType = issueType;
    return this;
  }

   /**
   * Get issueType
   * @return issueType
  **/
  @ApiModelProperty(required = true, value = "")
  public String getIssueType() {
    return issueType;
  }

  public void setIssueType(String issueType) {
    this.issueType = issueType;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Issue issue = (Issue) o;
    return Objects.equals(this.autoAnalyzed, issue.autoAnalyzed) &&
        Objects.equals(this.comment, issue.comment) &&
        Objects.equals(this.externalSystemIssues, issue.externalSystemIssues) &&
        Objects.equals(this.ignoreAnalyzer, issue.ignoreAnalyzer) &&
        Objects.equals(this.issueType, issue.issueType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoAnalyzed, comment, externalSystemIssues, ignoreAnalyzer, issueType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Issue {\n");

    sb.append("    autoAnalyzed: ").append(toIndentedString(autoAnalyzed)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    externalSystemIssues: ").append(toIndentedString(externalSystemIssues)).append("\n");
    sb.append("    ignoreAnalyzer: ").append(toIndentedString(ignoreAnalyzer)).append("\n");
    sb.append("    issueType: ").append(toIndentedString(issueType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

